{
	"info": {
		"_postman_id": "1a5781ed-420d-450f-bf90-e54364e64701",
		"name": "DevFrameTemplate API",
		"description": "DevFrameTemplate\n\nContact Support:\n Name: DevFrameTemplate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24603451"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "services/app",
					"item": [
						{
							"name": "Token Auth",
							"item": [
								{
									"name": "/api/TokenAuth/Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"sessionToken\", pm.response.json().result.sessionToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userCredential\": \"admin\",\n  \"password\": \"123Qwe.\",\n  \"authType\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/TokenAuth/Verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"TokenAuth",
												"Verify"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"userCredential\": \"veniam commodo ad in aliquip\",\n  \"password\": \"in Ut fugiat ullamco c\",\n  \"authType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sessionToken\": \"non\",\n  \"code\": \"irure anim pariatur aliquip\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/TokenAuth/Verify",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"TokenAuth",
														"Verify"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"success\": false,\n  \"nextStep\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sessionToken\": \"eu consequat sunt\",\n  \"googleAuthenticatorQRCodeUrl\": \"consectetur reprehenderit Duis eu occaecat\",\n  \"message\": \"minim dolore\"\n}"
										}
									]
								},
								{
									"name": "/api/TokenAuth/Authenticate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"accesToken\", pm.response.json().result.accessToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"123Qwe.\",\n  \"sessionToken\": \"{{sessionToken}}\",\n  \"userCredential\": \"admin\",\n  \"rememberClient\": true,\n  \"authType\": 1\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/TokenAuth/Authenticate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"TokenAuth",
												"Authenticate"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"et pro\",\n  \"userCredential\": \"ipsum\",\n  \"sessionToken\": \"cons\",\n  \"rememberClient\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/TokenAuth/Authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"TokenAuth",
														"Authenticate"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"userId\": 10804273,\n  \"accessToken\": \"deserunt ex do\",\n  \"refreshToken\": \"Duis magna in incididunt\",\n  \"encryptedAccessToken\": \"quis dolore occaecat\",\n  \"expireInSeconds\": -59501250\n}"
										}
									]
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "/api/services/app/User/Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"idForUser\", pm.response.json().result.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"wX3-sNXKLxmp5@QrsFLxSNRFdpPjcEfZn.hovx\",\n  \"name\": \"postman\",\n  \"password\": \"123qweASD123.\",\n  \"surname\": \"apitest\",\n  \"userName\": \"postman_user\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"Create"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailAddress\": \"PezKMRW5@CtCnhqVnzoyDExVadUCknwXtY.unks\",\n  \"name\": \"eu dolor magna\",\n  \"password\": \"dolore non\",\n  \"surname\": \"tempor aliqua occaecat magna\",\n  \"userName\": \"qui in\",\n  \"isActive\": false,\n  \"roleNames\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/Create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"Create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"emailAddress\": \"blKSnlGt@ZbCxDoAauBkLSjNeiqI.sm\",\n  \"name\": \"cupidatat culpa est\",\n  \"surname\": \"ex\",\n  \"userName\": \"est\",\n  \"id\": -95779566,\n  \"isActive\": false,\n  \"fullName\": \"sed nulla officia\",\n  \"lastLoginTime\": \"2008-01-14T15:06:23.289Z\",\n  \"creationTime\": \"2002-04-04T17:02:58.364Z\",\n  \"roleNames\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"2010-09-15T19:34:02.039Z\"\n}"
										}
									]
								},
								{
									"name": "/api/services/app/User/Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/Get?Id={{idForUser}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"Get"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForUser}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/Get?Id=-99403511",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"Get"
													],
													"query": [
														{
															"key": "Id",
															"value": "-99403511"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"emailAddress\": \"YYVOjbntvkX3u@SbqDLWFuKodRZzInzcBNMyzxgd.gp\",\n  \"name\": \"cillum aliqua\",\n  \"surname\": \"cillum\",\n  \"userName\": \"ad Ut\",\n  \"id\": 1555657,\n  \"isActive\": false,\n  \"fullName\": \"consequat\",\n  \"lastLoginTime\": \"1978-06-30T17:10:16.911Z\",\n  \"creationTime\": \"1981-12-20T16:50:54.621Z\",\n  \"roleNames\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"2002-11-17T15:08:23.042Z\"\n}"
										}
									]
								},
								{
									"name": "/api/services/app/User/GetAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/GetAll?Keyword=sint labore&IsActive=true&SkipCount=1318448359&MaxResultCount=780235586",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"GetAll"
											],
											"query": [
												{
													"key": "Keyword",
													"value": "sint labore"
												},
												{
													"key": "IsActive",
													"value": "true"
												},
												{
													"key": "SkipCount",
													"value": "1318448359"
												},
												{
													"key": "MaxResultCount",
													"value": "780235586"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/GetAll?Keyword=sint labore&IsActive=true&SkipCount=1318448359&MaxResultCount=780235586",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"GetAll"
													],
													"query": [
														{
															"key": "Keyword",
															"value": "sint labore"
														},
														{
															"key": "IsActive",
															"value": "true"
														},
														{
															"key": "SkipCount",
															"value": "1318448359"
														},
														{
															"key": "MaxResultCount",
															"value": "780235586"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"totalCount\": -80299013\n}"
										}
									]
								},
								{
									"name": "/api/services/app/User/GetRoles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/GetRoles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"GetRoles"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/GetRoles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"GetRoles"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/User/Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"postman@guncellendi.com\",\n  \"name\": \"postmanupdated\",\n  \"surname\": \"apitest\",\n  \"userName\": \"postman_user\",\n  \"id\": {{idForUser}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"Update"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailAddress\": \"Xm52EqMr@qmcfuAVzXgJbqdxslvIUWQdL.lqjh\",\n  \"name\": \"al\",\n  \"surname\": \"in ipsum nisi est officia\",\n  \"userName\": \"Excepteur anim nisi\",\n  \"id\": 79052666,\n  \"approvementRequestId\": -45126659,\n  \"isActive\": false,\n  \"fullName\": \"ex aliqua\",\n  \"lastLoginTime\": \"1977-10-21T22:34:52.292Z\",\n  \"creationTime\": \"1950-07-28T13:20:56.814Z\",\n  \"roleNames\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"1961-11-25T03:55:58.781Z\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/Update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"Update"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"emailAddress\": \"YYVOjbntvkX3u@SbqDLWFuKodRZzInzcBNMyzxgd.gp\",\n  \"name\": \"cillum aliqua\",\n  \"surname\": \"cillum\",\n  \"userName\": \"ad Ut\",\n  \"id\": 1555657,\n  \"isActive\": false,\n  \"fullName\": \"consequat\",\n  \"lastLoginTime\": \"1978-06-30T17:10:16.911Z\",\n  \"creationTime\": \"1981-12-20T16:50:54.621Z\",\n  \"roleNames\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"2002-11-17T15:08:23.042Z\"\n}"
										}
									]
								},
								{
									"name": "/api/services/app/User/Activate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{idForUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/Activate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"Activate"
											],
											"query": [
												{
													"key": "id",
													"value": "{{idForUser}}",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 36660140\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/Activate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"Activate"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/api/services/app/User/DeActivate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{idForUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/DeActivate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"DeActivate"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 36660140\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/DeActivate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"DeActivate"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/api/services/app/User/ChangeLanguage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"languageName\": \"dolor\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/ChangeLanguage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"ChangeLanguage"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"languageName\": \"dolor\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/ChangeLanguage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"ChangeLanguage"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/api/services/app/User/ChangeRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approvementRequestId\": 328,\n  \"userId\": {{idForUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/ChangeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"ChangeRole"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"approvementRequestId\": 24469598,\n  \"userId\": -70160185\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/ChangeRole",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"ChangeRole"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/api/services/app/User/ChangePassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currentPassword\": \"123Qwe.\",\n  \"newPassword\": \"123Qwe.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/ChangePassword",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"ChangePassword"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"Duis officia\",\n  \"newPassword\": \"minim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/ChangePassword",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"ChangePassword"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "true"
										}
									]
								},
								{
									"name": "/api/services/app/User/ResetPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"adminPassword\": \"123Qwe.\",\n  \"userId\": {{idForUser}},\n  \"newPassword\": \"123Qwe.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/ResetPassword",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"ResetPassword"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"adminPassword\": \"adipisicing i\",\n  \"newPassword\": \"pariatur ea incididunt consectetur voluptate\",\n  \"userId\": 55041446\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/ResetPassword",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"ResetPassword"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "true"
										}
									]
								},
								{
									"name": "/api/services/app/User/Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/User/Delete?Id={{idForUser}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"User",
												"Delete"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForUser}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/User/Delete?Id=-99403511",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"User",
														"Delete"
													],
													"query": [
														{
															"key": "Id",
															"value": "-99403511"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "/api/services/app/Role/Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"idForRole\", pm.response.json().result.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"displayName\": \"postman\",\n  \"name\": \"postman_role\",\n  \"normalizedName\": \"postman_role\",\n  \"description\": \"role for postman api testing\",\n  \"grantedPermissions\": [\n    \"string\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"Create"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"displayName\": \"amet deserunt\",\n  \"name\": \"non consectetur qui\",\n  \"normalizedName\": \"eu tempor nostrud\",\n  \"description\": \"minim\",\n  \"grantedPermissions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/Create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"Create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"displayName\": \"esse do Ut\",\n  \"name\": \"volu\",\n  \"id\": 22392147,\n  \"normalizedName\": \"velit officia\",\n  \"description\": \"id eu officia\",\n  \"grantedPermissions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"1955-02-16T02:13:24.837Z\"\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/Get?Id={{idForRole}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"Get"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForRole}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/Get?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"Get"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"displayName\": \"consectetur\",\n  \"name\": \"amet dolore sed cillum\",\n  \"id\": -70158421,\n  \"normalizedName\": \"voluptate\",\n  \"description\": \"Duis officia et est pariatur\",\n  \"grantedPermissions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"1977-01-12T20:55:04.029Z\"\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/GetAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/GetAll",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"GetAll"
											],
											"query": [
												{
													"key": "Keyword",
													"value": "sint labore",
													"disabled": true
												},
												{
													"key": "SkipCount",
													"value": "1318448359",
													"disabled": true
												},
												{
													"key": "MaxResultCount",
													"value": "780235586",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/GetAll?Keyword=sint labore&SkipCount=1318448359&MaxResultCount=780235586",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"GetAll"
													],
													"query": [
														{
															"key": "Keyword",
															"value": "sint labore"
														},
														{
															"key": "SkipCount",
															"value": "1318448359"
														},
														{
															"key": "MaxResultCount",
															"value": "780235586"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"totalCount\": -80299013\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/GetRoles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/GetRoles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"GetRoles"
											],
											"query": [
												{
													"key": "Permission",
													"value": "sint labore",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/GetRoles?Permission=sint labore",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"GetRoles"
													],
													"query": [
														{
															"key": "Permission",
															"value": "sint labore"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"displayName\": \"postman\",\n  \"name\": \"postman_role\",\n  \"id\": {{idForRole}},\n  \"normalizedName\": \"POSTMAN_ROLE\",\n  \"description\": \"role updated with postman\",\n  \"grantedPermissions\": [\n    \"string\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"Update"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"displayName\": \"consectetur\",\n  \"name\": \"amet dolore sed cillum\",\n  \"id\": -70158421,\n  \"normalizedName\": \"voluptate\",\n  \"description\": \"Duis officia et est pariatur\",\n  \"grantedPermissions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"1977-01-12T20:55:04.029Z\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/Update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"Update"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"displayName\": \"consectetur\",\n  \"name\": \"amet dolore sed cillum\",\n  \"id\": -70158421,\n  \"normalizedName\": \"voluptate\",\n  \"description\": \"Duis officia et est pariatur\",\n  \"grantedPermissions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"lastModificationTime\": \"1977-01-12T20:55:04.029Z\"\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/GetAllPermissions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/GetAllPermissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"GetAllPermissions"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/GetAllPermissions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"GetAllPermissions"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/GetRoleForEdit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/GetRoleForEdit?Id={{idForRole}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"GetRoleForEdit"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForRole}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/GetRoleForEdit?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"GetRoleForEdit"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"role\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"permissions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"grantedPermissionNames\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Role/Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Role/Delete?Id={{idForRole}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Role",
												"Delete"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForRole}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Role/Delete?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Role",
														"Delete"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Currency",
							"item": [
								{
									"name": "/api/services/app/Currency/Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"idForCurrency\", pm.response.json().result.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"postman_test\",\n  \"name\": \"name_postman_test\",\n  \"order\": {{currencyOrder}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"Create"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"cupidatat culpa exercitation ut nisi\",\n  \"name\": \"dolor dolor occaecat exercitation\",\n  \"order\": 72369024\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/Create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"Create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 8612875,\n  \"code\": \"fugiat\",\n  \"name\": \"amet mollit\",\n  \"order\": 17404540,\n  \"exchangeRates\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Currency/GetAllCurrentDayRates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/GetAllCurrentDayRates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"GetAllCurrentDayRates"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/GetAllCurrentDayRates",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"GetAllCurrentDayRates"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"code\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"order\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbdaValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbdsValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbeaValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbesValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"code\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"order\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbdaValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbdsValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbeaValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mbesValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
										}
									]
								},
								{
									"name": "/api/services/app/Currency/GetCurrencyIdByName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/GetCurrencyIdByName?name=name_postman_test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"GetCurrencyIdByName"
											],
											"query": [
												{
													"key": "name",
													"value": "name_postman_test"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/GetCurrencyIdByName?name=sint labore",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"GetCurrencyIdByName"
													],
													"query": [
														{
															"key": "name",
															"value": "sint labore"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "56662579"
										}
									]
								},
								{
									"name": "/api/services/app/Currency/Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/Get?Id={{idForCurrency}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"Get"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForCurrency}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/Get?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"Get"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": -22445699,\n  \"code\": \"in irure ut deser\",\n  \"name\": \"voluptate elit amet\",\n  \"order\": 82271719,\n  \"exchangeRates\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Currency/GetAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/GetAll",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"GetAll"
											],
											"query": [
												{
													"key": "Code",
													"value": "sint labore",
													"disabled": true
												},
												{
													"key": "Name",
													"value": "sint labore",
													"disabled": true
												},
												{
													"key": "Order",
													"value": "56662579",
													"disabled": true
												},
												{
													"key": "ExchangeRates",
													"value": "{\"id\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"date\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"currencyId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"value\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"type\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"creatorUserId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"creationTime\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"lastModifierUserId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"lastModificationTime\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"deleterUserId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"deletionTime\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"isDeleted\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"tenantId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"currency\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"}}",
													"disabled": true
												},
												{
													"key": "ExchangeRates",
													"value": "{\"id\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"date\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"currencyId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"value\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"type\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"creatorUserId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"creationTime\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"lastModifierUserId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"lastModificationTime\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"deleterUserId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"deletionTime\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"isDeleted\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"tenantId\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"},\"currency\":{\"value\":\"<Error: Too many levels of nesting to fake this schema>\"}}",
													"disabled": true
												},
												{
													"key": "Id",
													"value": "56662579",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/GetAll?Code=sint labore&Name=sint labore&Order=56662579&ExchangeRates=[object Object]&ExchangeRates=[object Object]&Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"GetAll"
													],
													"query": [
														{
															"key": "Code",
															"value": "sint labore"
														},
														{
															"key": "Name",
															"value": "sint labore"
														},
														{
															"key": "Order",
															"value": "56662579"
														},
														{
															"key": "ExchangeRates",
															"value": "[object Object]"
														},
														{
															"key": "ExchangeRates",
															"value": "[object Object]"
														},
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"totalCount\": -80299013\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Currency/Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{idForCurrency}},\n  \"code\": \"fugiat\",\n  \"name\": \"amet mollit\",\n  \"order\": {{currencyOrder}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"Update"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 8612875,\n  \"code\": \"fugiat\",\n  \"name\": \"amet mollit\",\n  \"order\": 17404540,\n  \"exchangeRates\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/Update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"Update"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 8612875,\n  \"code\": \"fugiat\",\n  \"name\": \"amet mollit\",\n  \"order\": 17404540,\n  \"exchangeRates\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "/api/services/app/Currency/Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/Currency/Delete?Id={{idForCurrency}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"Currency",
												"Delete"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForCurrency}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/Currency/Delete?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"Currency",
														"Delete"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Exchange Rate",
							"item": [
								{
									"name": "/api/services/app/ExchangeRate/Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"idForExchangeRate\", pm.response.json().result.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"date\": \"2022-02-24T21:56:35.138Z\",\n  \"currencyId\": {{idForCurrency}},\n  \"value\": 999,\n  \"type\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"ExchangeRate",
												"Create"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"date\": \"1957-02-24T21:56:35.138Z\",\n  \"currencyId\": -33054544,\n  \"value\": 60361275.51075813,\n  \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"ExchangeRate",
														"Create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 50002009,\n  \"date\": \"1952-11-26T20:37:24.936Z\",\n  \"currencyId\": 892252,\n  \"value\": -87327304.77086546,\n  \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
										}
									]
								},
								{
									"name": "/api/services/app/ExchangeRate/AddExchangeRatesIfNotExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"id\":{{idForExchangeRate}},\n    \"currencyId\": {{idForCurrency}},\n    \"date\": \"2022-02-24T21:56:35.138Z\",\n    \"value\": 0,\n    \"type\": 1\n  }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/ExchangeRate/AddExchangeRatesIfNotExist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"ExchangeRate",
												"AddExchangeRatesIfNotExist"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"currencyId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"date\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"currencyId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/ExchangeRate/AddExchangeRatesIfNotExist",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"ExchangeRate",
														"AddExchangeRatesIfNotExist"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/api/services/app/ExchangeRate/Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Get?Id={{idForExchangeRate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"ExchangeRate",
												"Get"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForExchangeRate}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Get?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"ExchangeRate",
														"Get"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 50002009,\n  \"date\": \"1952-11-26T20:37:24.936Z\",\n  \"currencyId\": 892252,\n  \"value\": -87327304.77086546,\n  \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
										}
									]
								},
								{
									"name": "/api/services/app/ExchangeRate/GetAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/ExchangeRate/GetAll",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"ExchangeRate",
												"GetAll"
											],
											"query": [
												{
													"key": "Date",
													"value": "1973-10-19T15:31:41.182Z",
													"disabled": true
												},
												{
													"key": "CurrencyId",
													"value": "56662579",
													"disabled": true
												},
												{
													"key": "Value",
													"value": "49455884.53856304",
													"disabled": true
												},
												{
													"key": "Type",
													"value": "<integer>",
													"disabled": true
												},
												{
													"key": "Id",
													"value": "56662579",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/ExchangeRate/GetAll?Date=1973-10-19T15:31:41.182Z&CurrencyId=56662579&Value=49455884.53856304&Type=<integer>&Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"ExchangeRate",
														"GetAll"
													],
													"query": [
														{
															"key": "Date",
															"value": "1973-10-19T15:31:41.182Z"
														},
														{
															"key": "CurrencyId",
															"value": "56662579"
														},
														{
															"key": "Value",
															"value": "49455884.53856304"
														},
														{
															"key": "Type",
															"value": "<integer>"
														},
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"items\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"totalCount\": -80299013\n}"
										}
									]
								},
								{
									"name": "/api/services/app/ExchangeRate/Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json;odata.metadata=minimal;odata.streaming=true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{idForExchangeRate}},\n  \"date\": \"1952-11-26T20:37:24.936Z\",\n  \"currencyId\": {{idForCurrency}},\n  \"value\": 999,\n  \"type\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"ExchangeRate",
												"Update"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 50002009,\n  \"date\": \"1952-11-26T20:37:24.936Z\",\n  \"currencyId\": 892252,\n  \"value\": -87327304.77086546,\n  \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"ExchangeRate",
														"Update"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json;odata.metadata=minimal;odata.streaming=true"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 50002009,\n  \"date\": \"1952-11-26T20:37:24.936Z\",\n  \"currencyId\": 892252,\n  \"value\": -87327304.77086546,\n  \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
										}
									]
								},
								{
									"name": "/api/services/app/ExchangeRate/Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Delete?Id={{idForExchangeRate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"services",
												"app",
												"ExchangeRate",
												"Delete"
											],
											"query": [
												{
													"key": "Id",
													"value": "{{idForExchangeRate}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/services/app/ExchangeRate/Delete?Id=56662579",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"services",
														"app",
														"ExchangeRate",
														"Delete"
													],
													"query": [
														{
															"key": "Id",
															"value": "56662579"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "odata",
			"item": [
				{
					"name": "Approvement",
					"item": [
						{
							"name": "odata/Approvement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Approvement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Approvement"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Approvement",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Approvement"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementTypeId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"action\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"redirectUrl\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"workflowAction\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"actionType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementTypeId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"action\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"redirectUrl\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"workflowAction\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"actionType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Approvement/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Approvement/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Approvement",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Approvement/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Approvement",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementTypeId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"action\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"redirectUrl\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"workflowAction\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"actionType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementTypeId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"action\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"redirectUrl\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"workflowAction\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"actionType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementType\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Audit",
					"item": [
						{
							"name": "odata/Audit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Audit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Audit"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Audit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Audit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serviceName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"methodName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parameters\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"returnValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionDuration\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientIpAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"browserInfo\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exceptionMessage\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exception\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorTenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"customData\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serviceName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"methodName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parameters\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"returnValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionDuration\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientIpAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"browserInfo\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exceptionMessage\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exception\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorTenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"customData\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Audit/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Audit/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Audit",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Audit/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Audit",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serviceName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"methodName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parameters\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"returnValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionDuration\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientIpAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"browserInfo\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exceptionMessage\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exception\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorTenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"customData\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serviceName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"methodName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parameters\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"returnValue\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"executionDuration\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientIpAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"clientName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"browserInfo\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exceptionMessage\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"exception\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"impersonatorTenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"customData\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Enum Master",
					"item": [
						{
							"name": "odata/Enum Master",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/EnumMaster",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"EnumMaster"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/EnumMaster",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"EnumMaster"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumValues\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumValues\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Enum Master/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/EnumMaster/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"EnumMaster",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/EnumMaster/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"EnumMaster",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumValues\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumValues\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Enum Value",
					"item": [
						{
							"name": "odata/Enum Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/EnumValue",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"EnumValue"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/EnumValue",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"EnumValue"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMasterId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMaster\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvement\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMasterId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMaster\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvement\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Enum Value/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/EnumValue/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"EnumValue",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/EnumValue/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"EnumValue",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMasterId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMaster\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvement\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMasterId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enumMaster\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvement\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Mail Template",
					"item": [
						{
							"name": "odata/Mail Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/MailTemplate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"MailTemplate"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/MailTemplate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"MailTemplate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"addresses\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"addresses\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Mail Template/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/MailTemplate/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"MailTemplate",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/MailTemplate/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"MailTemplate",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"addresses\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"addresses\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Push Notification Template",
					"item": [
						{
							"name": "odata/Push Notification Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/PushNotificationTemplate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"PushNotificationTemplate"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/PushNotificationTemplate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"PushNotificationTemplate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"page\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"page\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Push Notification Template/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/PushNotificationTemplate/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"PushNotificationTemplate",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/PushNotificationTemplate/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"PushNotificationTemplate",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"page\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"key\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"page\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"translations\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Role",
					"item": [
						{
							"name": "odata/Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Role"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Role",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Role"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"displayName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isStatic\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDefault\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"displayName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isStatic\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDefault\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Role/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Role/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Role",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Role/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Role",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"displayName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isStatic\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDefault\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"displayName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isStatic\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDefault\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"description\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Setting",
					"item": [
						{
							"name": "odata/Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Setting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Setting"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Setting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Setting"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Setting/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Setting/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Setting",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Setting/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Setting",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"value\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Tenant",
					"item": [
						{
							"name": "odata/Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Tenant",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Tenant"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Tenant",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Tenant"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenancyName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectionString\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"edition\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"editionId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenancyName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectionString\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"edition\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"editionId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/Tenant/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/Tenant/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"Tenant",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/Tenant/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"Tenant",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenancyName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectionString\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"edition\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"editionId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenancyName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectionString\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"edition\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"editionId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "odata/User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"User"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"User"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"emailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedEmailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedUserName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"password\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"surname\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"authenticationSource\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fullName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"emailConfirmationCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"passwordResetCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lockoutEndDateUtc\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"accessFailedCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isLockoutEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"phoneNumber\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isPhoneNumberConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"securityStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isTwoFactorEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"logins\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"roles\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"settings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isEmailConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tokens\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"otpSessionHistories\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fcmToken\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isGoogleAuthenticatorConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"emailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedEmailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedUserName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"password\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"surname\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"authenticationSource\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fullName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"emailConfirmationCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"passwordResetCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lockoutEndDateUtc\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"accessFailedCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isLockoutEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"phoneNumber\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isPhoneNumberConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"securityStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isTwoFactorEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"logins\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"roles\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"settings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isEmailConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tokens\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"otpSessionHistories\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fcmToken\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isGoogleAuthenticatorConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "odata/User/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json;odata.metadata=minimal;odata.streaming=true"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/odata/User/$count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata",
										"User",
										"$count"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/odata/User/$count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"odata",
												"User",
												"$count"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json;odata.metadata=minimal;odata.streaming=true"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"emailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedEmailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedUserName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"password\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"surname\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"authenticationSource\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fullName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"emailConfirmationCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"passwordResetCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lockoutEndDateUtc\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"accessFailedCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isLockoutEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"phoneNumber\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isPhoneNumberConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"securityStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isTwoFactorEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"logins\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"roles\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"settings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isEmailConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tokens\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"otpSessionHistories\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fcmToken\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isGoogleAuthenticatorConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  {\n    \"emailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedEmailAddress\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"normalizedUserName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"password\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"surname\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"userName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"id\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModificationTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isDeleted\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUserId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deletionTime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"authenticationSource\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tenantId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fullName\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"emailConfirmationCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"passwordResetCode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lockoutEndDateUtc\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"accessFailedCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isLockoutEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"phoneNumber\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isPhoneNumberConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"securityStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isTwoFactorEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"logins\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"roles\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"claims\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"permissions\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"settings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isEmailConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isActive\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"concurrencyStamp\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tokens\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"deleterUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"creatorUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"lastModifierUser\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"otpSessionHistories\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"mails\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"fcmToken\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"isGoogleAuthenticatorConfirmed\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"pushNotifications\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementResults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvementRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"approvers\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "odata/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;odata.metadata=minimal;odata.streaming=true"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/odata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"odata"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/odata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"odata"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;odata.metadata=minimal;odata.streaming=true"
								}
							],
							"cookie": [],
							"body": "{\n  \"typeAnnotation\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"entitySets\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"singletons\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"functionImports\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accesToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://paybtdevframe.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "currencyOrder",
			"value": "10099",
			"type": "string"
		}
	]
}